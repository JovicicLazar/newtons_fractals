#include "../include/renderer.hpp"
#include "newton_ispc.h" // generated by ispc compiler
#include <cmath>
#include <iostream>

void precomputeRoots(const int degree, std::vector<double> &rootsRe, std::vector<double> &rootsIm)
{
    for (int k = 0; k < degree; ++k) {
        double angle = 2.0 * M_PI * k / degree;
        rootsRe[k] = cos(angle);
        rootsIm[k] = sin(angle);
    }
}

void Renderer::renderFractal(const int width, const int height, const int degree, const int maxIter,
                           const double xmin, const double xmax, const double ymin, const double ymax,
                           std::vector<uint8_t> &image)
{
    std::vector<double> rootsRe(degree), rootsIm(degree);
    precomputeRoots(degree, rootsRe, rootsIm);
    
    int size = width * height;
    
    std::vector<uint8_t> rPlane(size);
    std::vector<uint8_t> gPlane(size);
    std::vector<uint8_t> bPlane(size);
    
    ispc::render(width, height, degree, maxIter,
                 xmin, xmax, ymin, ymax,
                 rootsRe.data(), rootsIm.data(),
                 rPlane.data(), gPlane.data(), bPlane.data());
    
    image.resize(size * 3);
    
    for (int i = 0; i < size; i++) {
        image[i * 3 + 0] = rPlane[i];
        image[i * 3 + 1] = gPlane[i];
        image[i * 3 + 2] = bPlane[i];
    }
}