#include "../include/renderer.hpp"

#include <cmath>
#include <iostream>

#include "newton_ispc.h" // generated by ispc compiler

void precomputeRoots(const int degree, std::vector<double> &rootsRe, std::vector<double> &rootsIm)
{
    for (int k = 0; k < degree; ++k)
    {
        double angle = 2.0 * M_PI * k / degree;
        rootsRe[k] = cos(angle);
        rootsIm[k] = sin(angle);
    }
}

void Renderer::renderFractal(Image &image, const int degree, const int maxIter,
                             const double xmin, const double xmax, const double ymin, const double ymax)
{
    int image_width = image.width;
    int image_height = image.height;
    auto &image_data = image.image_data;
    int size = image_width * image_height;

    std::vector<double> rootsRe(degree), rootsIm(degree);

    precomputeRoots(degree, rootsRe, rootsIm);

    std::vector<uint8_t> rPlane(size);
    std::vector<uint8_t> gPlane(size);
    std::vector<uint8_t> bPlane(size);

    ispc::render(image_width, image_height, degree, maxIter,
                 xmin, xmax, ymin, ymax,
                 rootsRe.data(), rootsIm.data(),
                 rPlane.data(), gPlane.data(), bPlane.data());

    for (int i = 0; i < size; i++)
    {
        image_data[i * 3 + 0] = bPlane[i];
        image_data[i * 3 + 1] = gPlane[i];
        image_data[i * 3 + 2] = rPlane[i];
    }
}